# Generated by Django 2.2.9 on 2019-12-18 16:01

from django.db import migrations


def populate_new_revision_fields(apps, schema_editor):
    PontoonResource = apps.get_model("wagtail_localize_pontoon.PontoonResource")
    PontoonResourceSubmission = apps.get_model(
        "wagtail_localize_pontoon.PontoonResourceSubmission"
    )
    TranslatableObject = apps.get_model(
        "wagtail_localize_translation_memory.TranslatableObject"
    )
    TranslatableRevision = apps.get_model(
        "wagtail_localize_translation_memory.TranslatableRevision"
    )
    ContentType = apps.get_model("contenttypes.ContentType")

    def get_page_specific_instance(page):
        page_model = apps.get_model(
            page.content_type.app_label, page.content_type.model
        )
        return page_model.objects.get(id=page.id)

    def get_translatable_object_from_page(page):
        page_translation_model = page._meta.get_field("locale").model

        object, created = TranslatableObject.objects.get_or_create(
            translation_key=page.translation_key,
            content_type=ContentType.objects.get_for_model(page_translation_model),
        )

        return object

    def get_revision_from_page_revision(page_revision):
        try:
            return TranslatableRevision.objects.get(page_revision=page_revision)
        except TranslatableRevision.DoesNotExist:
            page_specific = get_page_specific_instance(page_revision.page)

            return TranslatableRevision.objects.create(
                object=get_translatable_object_from_page(page_specific),
                locale=page_specific.locale,
                content_json=page_revision.content_json,
                created_at=page_revision.created_at,
                page_revision=page_revision,
            )

    for resource in PontoonResource.objects.select_related(
        "page", "current_page_revision"
    ).iterator():
        page_specific = get_page_specific_instance(resource.page)
        resource.object = get_translatable_object_from_page(page_specific)

        if resource.current_page_revision:
            resource.current_revision = get_revision_from_page_revision(
                resource.current_page_revision
            )

        resource.save()

    for submission in PontoonResourceSubmission.objects.select_related(
        "page_revision"
    ).iterator():
        submission.revision = get_revision_from_page_revision(submission.page_revision)
        submission.save()


class Migration(migrations.Migration):

    dependencies = [
        ("wagtail_localize_pontoon", "0008_add_new_revision_fields"),
    ]

    operations = [
        migrations.RunPython(populate_new_revision_fields, migrations.RunPython.noop),
    ]
